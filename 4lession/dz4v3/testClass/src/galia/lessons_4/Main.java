package galia.lessons_4;

public class Main {

    public static void main(String[] args) {

        //1. Создать класс «Сотрудник» с полями: ФИО, должность, email, телефон, зарплата, возраст;
        //2. Конструктор класса должен заполнять эти поля при создании объекта;
        //3. Внутри класса «Сотрудник» написать метод, который выводит информацию об объекте в консоль;
         /*

            реализовано в классе Employee

        */
        //4. Создать массив из 5 сотрудников:
        //Пример:
        //Person[] persArray = new Person[5]; // Вначале объявляем массив объектов
        //persArray[0] = new Person("Ivanov Ivan", "Engineer", " ivivan@mailbox.com ", "892312312", 30000,
        //30); // потом для каждой ячейки массива задаем объект
        //persArray[1] = new Person(...);
        //...
        //persArray[4] = new Person(...);
        //С помощью цикла вывести информацию только о сотрудниках старше 40 лет;

        Employee[] empArray = new Employee[5];
        empArray[0] = new Employee("Авдеева Анастасия Александровна", "Генеральный директор", "aaa@a.com",
                "89000000000", 120000, 45);
        empArray[1] = new Employee("Буянов Борис Борисович", "Исполнительный директор", "bbb@b.com",
                "89001111111", 70000, 42);
        empArray[2] = new Employee("Верещагина Виолетта Валентиновна", "Начальник отдела продаж", "ccc@c.com",
                "89002222222", 55000, 41);
        empArray[3] = new Employee("Голиков Геннадий Григорьевич", "Менеджер", "ddd@d.com",
                "89003333333", 40000, 33);
        empArray[4] = new Employee("Давлетов Дмитрий Давыдочив", "Администратор", "eee@e.com",
                "89004444444", 30000, 26);

        System.out.println("Сотрудники старше 40 лет:");

        for(Employee emp : empArray){
            if(emp.getAge() >= 40){
                emp.printInfoEmployee();
            }
        }

        System.out.println("");

        //5. Создать классы Собака и Кот с наследованием от класса Животное;
        //6. Животные могут выполнять действия: бежать, плыть, перепрыгивать препятствие.
        // В качестве параметра каждому методу передается величина, означающая или длину препятствия (для бега и плавания), или высоту (для прыжков);

        //7. У каждого животного есть ограничения на действия
        // (бег: кот – 200 м., собака – 500 м.; прыжок: кот – 2 м., собака – 0.5 м.; плавание: кот не умеет плавать, собака – 10 м.);
        /*

            реализовано в классах Animal, Dog, Cat и интерфейсах Runnable, Swimable, Jumpable

        */


        //8. При попытке животного выполнить одно из этих действий, оно должно сообщить результат в консоль.
        // (Например, dog1.run(150); -> результат: run: true);
        Dog dog1 = new Dog();
        dog1.run(150);
        dog1.jump(0.4);

        Cat cat1 = new Cat();
        cat1.swim(-1);
        cat1.run(100);

        //9. * Добавить животным разброс в ограничениях. То есть у одной собаки ограничение на бег может быть 400 м., у другой – 600 м.
        Dog dog2 = new Dog(400.0, 10.0, 0.5);
        Dog dog3 = new Dog(600.0, 10.0, 0.5);

        dog1.run(499);
        dog2.run(499);
        dog3.run(499);

        Cat cat2 = new Cat(100, 0, 10);
        cat2.run(99);


    }
}



//
